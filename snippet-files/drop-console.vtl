<textarea class="velocity-output-pre hide" readonly="readonly"></textarea>
<div class="velocity-output hide"></div>
<img id="spinnerConsole" class="hide" src="/img/spinner.gif" width="32" height="32" />
<hr>
<form action="/test/" class="clearfix m-y-md">
    <textarea class="velocity-console" name="ConsoleQuery" id="ConsoleQuery" onkeyup="vcKeyQueue()" rows="10" cols="60"></textarea>
    <div class="clearfix">&nbsp;</div>
    <p>
        <a class="btn btn-darkblue outline" onclick="vcSendQuery()">Send</a>
        Output Format:
        <input type="radio" name="outFormat" id="outFormat1" value="preformatted" checked="checked"><label for="outFormat1">Preformatted</label> &nbsp;
        <input type="radio" name="outFormat" id="outFormat2" value="html" /><label for="outFormat2">HTML</label> &nbsp;
		<input type="checkbox" name="vtlProcess" id="vtlProcess" checked="checked" value="1"><label for="vtlProcess">Process Velocity</label> &nbsp;
		<input type="checkbox" name="liveUpdate" id="liveUpdate" onclick="vcLiveUpdater()" value="1"><label for="liveUpdate" onclick="vcLiveUpdater()">Live Update</label>  &nbsp;
		<input type="checkbox" name="enableLogging" id="enableLogging" value="1"><label for="enableLogging">Enable Logging</label>
    </p>
	<span id="bench"></span>
</form>
<div class="helpful-area">
	<div class="console-history">
		<h2>History</h2>
		<div id="history"></div>
	</div>
	<div class="console-snippets">
		<div id="snippet-markdown"></div>
	</div>
</div>
<script>
/* IMPORTANT: Velocity is processed via an XHR request to another page, this page eval's
 *            the code and return output.
*/
var VelocityProcessorEndpoint = '/message/dispatch';
var benchStart, benchFinish, liveUpdate
var lastDispatch = 0;
var keyQueue = String("");
function vcHideEle(el) { $(el).addClass('hide'); }
function vcShowEle(el) { $(el).removeClass('hide'); }
function updateHistory(lastInput) {
	$('#history').prepend('<pre>' + lastInput + '</pre><hr>');
}
function vcGetOutputHeight(data) {
	if (data) {
		var dataSplit = data.split(/\n/g);
		if (dataSplit.length && dataSplit.length > 0) {
			lineHeight = 30 + (dataSplit.length * 18);
		} else {
			lineHeight = 30 + (data.length * 18);
		}
		//lineHeight = lineHeight + ((data.length * 2) + 30);
		return String(lineHeight + "px");
	} else {
		return "60px";
	}

}
function vcLastDispatchDiff() {
	return Number(Date.now() - lastDispatch);
}
function vcOutputBenchmarks() {
	if (benchStart && benchFinish) {
		$('#bench').html('Last Request:' + (benchFinish - benchStart) + 'ms');
	}
}
function vcSendOutput(data) {
	if ($("input:radio[name ='outFormat']:checked").val() == 'preformatted') {
		vcHideEle('div.velocity-output');
		vcShowEle('textarea.velocity-output-pre');
		$('textarea.velocity-output').val(data.replace(/[ \s\t]+$/g, ''));
		$('textarea.velocity-output-pre').css('height', vcGetOutputHeight(data));
	} else {
		vcHideEle('textarea.velocity-output-pre');
		vcShowEle('div.velocity-output');
		$('div.velocity-output').html(data);
	}
}
function vcKeyQueue(e) {
	keyQueue = keyQueue + 'a';
}
function vcLiveUpdater() {
	if ($('#liveUpdate').prop('checked')) {
		if (!liveUpdate) {
			liveUpdate = setInterval(function () {
				if (keyQueue.length > 0) {
					vcSendQuery(); keyQueue = String("");
				}
			}, 400);
		}
	} else {
		if (liveUpdate) {
			clearInterval(liveUpdate);
			liveUpdate = null;
		}
	}
}
function vcIsLiveUpdateEnabled() {
	if (liveUpdate && $('#liveUpdate').prop('checked')) {
		return true;
	} else {
		return false;
	}
}
function vcIsVtlProcessEnabled() {
	return $('#vtlProcess').prop('checked');
}
function vcIsLoggingEnabled() {
	return $('#enableLogging').prop('checked');
}
function vcSendQuery() {
	if (!vcIsLiveUpdateEnabled()) {
		vcHideEle('textarea.velocity-output');
		vcHideEle('div.velocity-output');
		vcShowEle('#spinnerConsole');
		$('textarea.velocity-output').val('');
		$('#enableLogging').prop('disabled', false);
		updateHistory($("#ConsoleQuery").val());
	} else {
		$('#enableLogging').prop('checked', false);
		$('#enableLogging').prop('disabled', true);
	}
	benchStart = Date.now();
	if (vcIsVtlProcessEnabled()) {
		if (vcLastDispatchDiff() > 1000) {
			$.ajax({
				url: VelocityProcessorEndpoint,
				type: 'POST',
				data: {'q': 'vtlConsole', 's': $("#ConsoleQuery").val(), 'l': vcIsLoggingEnabled() },
				success: function (data) {
					benchFinish = Date.now(); vcOutputBenchmarks();
					lastDispatch = Date.now();
					vcHideEle('#spinnerConsole');
					vcSendOutput(data);
				},
				error: function (data, status, xhr) {
					vcHideEle('#spinnerConsole');
					vcSendOutput('Error:'+"\n"+'status:'+status+"\n"+'xhr:'+xhr+"\n"+'data:'+data+"\n");
				},
			});
		}
	} else {
		vcHideEle('#spinnerConsole');
		vcHideEle('textarea.velocity-output');
		vcShowEle('div.velocity-output');
		vcSendOutput($("#ConsoleQuery").val());
	}
}
$("#ConsoleQuery").on('keydown', function(e) {
	if(e.keyCode === 9) {
		var start = this.selectionStart;
		var end = this.selectionEnd;
		var value = $(this).val();
		$(this).val(value.substring(0, start)
					+ "\t"
					+ value.substring(end));
		this.selectionStart = this.selectionEnd = start + 1;
		console.log('here');
		e.preventDefault();
	}
});
</script>
<style type="text/css">
.velocity-console {
	font-family: monospace,monospace !important;
	font-size: 13pt !important;
	color: black !important;
	width: 98%;
}
textarea.velocity-output {
	font-family: monospace,monospace !important;
	font-size: 12pt !important;
	color: black !important;
	background-color: #ccc;
	width: 99%;
	height: 16em;
	vertical-align: text-top;
}
div.helpful-area {
	display: flex
}
div.helpful-area>div {
	width: 48%;
	max-width: 48%;
	overflow: auto;
	max-height: 30rem;
	padding: 0 0.25rem;
}
div.helpful-area>div pre {
	font-size: 11px;
}
div.helpful-area h1 {
	font-size: 1.5rem;
}
div.helpful-area h3 {
	font-size: 1.25rem;
}
div.helpful-area #snippet-markdown hr {
	border: none;
	margin-bottom: 2rem;
}
.clearfix {
	clear: both;
}
.hide {
	display: none !important;
}
</style>